generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LayerCategory {
  base_top
  base_bottom
  mid_top
  mid_bottom
  outerwear
  footwear
  headwear
  accessory
}

enum ClothingType {
  TShirt
  LongSleeve
  Sweater
  Hoodie
  Jacket
  Pants
  Jeans
  Shorts
  Shoes
  Beanie
  Hat
  Scarf
  Gloves
  Raincoat
  Umbrella
  // TODO: Add more if necessary
}

enum Style {
  Formal
  Casual
  Athletic
  Party
  Business
  Outdoor
  // TODO: Add more if necessary
}

enum Material {
  Cotton
  Wool
  Polyester
  Leather
  Nylon
  Fleece
  // TODO: Add more if necessary
}

enum OverallStyle {
  Formal
  Casual
  Athletic
  // TODO: Add more if necessary
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  password      String
  outfits       Outfit[]
  closetItems   ClosetItem[]
  preference    UserPreference?
  events        Event[]
}

model ClosetItem {
  id            String         @id @default(uuid())
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  layer         LayerCategory
  type          ClothingType
  filename      String
  createdAt     DateTime       @default(now())
  colorHex      String
  warmthFactor  Int
  waterproof    Boolean
  style         Style
  material      Material

  // Outfits that use this item (reverse relation)
  outfitItems   OutfitItem[]
}

model Outfit {
  id             String         @id @default(uuid())
  userId         String
  user           User           @relation(fields: [userId], references: [id])
  createdAt      DateTime       @default(now())
  weatherSummary String?        // Store as JSON string (weather snapshot)
  warmthRating   Int
  waterproof     Boolean
  userRating     Int?
  overallStyle   OverallStyle
  outfitItems    OutfitItem[]
}

model OutfitItem {
  id             String         @id @default(uuid())
  outfitId       String
  outfit         Outfit         @relation(fields: [outfitId], references: [id])
  closetItemId   String
  closetItem     ClosetItem     @relation(fields: [closetItemId], references: [id])
  layerCategory  LayerCategory
  sortOrder      Int
}

model Event {
  id          String         @id @default(uuid())
  userId      String
  user        User           @relation(fields: [userId], references: [id])
  location    String
  weather     String?        // JSON string, or reference to weather snapshot
  dateFrom    DateTime
  dateTo      DateTime
  style       Style
}

model UserPreference {
  id                    String      @id @default(uuid())
  userId                String      @unique
  user                  User        @relation(fields: [userId], references: [id])
  style                 Style
  preferredColours      Json        // e.g. [{min:0, max:20}, ...]
  learningWeight        Float?
  updatedAt             DateTime    @updatedAt
}
